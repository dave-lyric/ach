/**
 * Copyright (C) 2013, Moss Computing Inc.
 *
 * This file is part of ach.
 *
 * ach is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * ach is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ach; see the file COPYING.  If not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 *
 * Linking this library statically or dynamically with other modules is
 * making a combined work based on this library.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this library with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this library, you may extend
 * this exception to your version of the library, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 */
package com.moss.ach.file.format;

import com.moss.ach.file.*;
import com.moss.usbanknumbers.RoutingNumber;
import org.apache.log4j.BasicConfigurator;
import org.junit.Assert;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.StringWriter;
import java.util.ArrayList;

/**
 * Demonstrates the library's ability to generate an ach file that exactly matches the
 * legacy one generated by e2.
 */
public class TestReplicateLegacyFile {
	
	@Test
	public void replicate() throws Exception {
		
		BasicConfigurator.configure();
		
		final String originalFileData;
		{
			InputStream in = new FileInputStream("src/test/resources/com/moss/ach/file/rck.ach");
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			
			byte[] buffer = new byte[1024 * 10]; //10k buffer
			for(int numRead = in.read(buffer); numRead!=-1; numRead = in.read(buffer)){
				out.write(buffer, 0, numRead);
			}
			
			in.close();
			out.close();
			
			originalFileData = new String(out.toByteArray());
		}
		
		final int BLOCKING_FACTOR = 10;
		final int FORMAT_CODE = 1;
		final PriorityCode PRIORITY_CODE = PriorityCode.DEFAULT;
		final int RECORD_SIZE = 94;
		
		AchFileFormat file = new AchFileFormat();
		
		file.header = new AchFileHeaderFormat();
		file.header.fileCreationDate = new SimpleDate(8, 7, 29);
		file.header.fileCreationTime = new SimpleTime(15, 33);
		file.header.fileIdModifier = new FileIdModifier('A');
		file.header.immediateDestination = new RoutingNumber("076401251");
		file.header.immediateDestinationName = "achdestname";
		file.header.immediateOrigin = "1563456789";
		file.header.immediateOriginName = "companyname";
		file.header.referenceCode = null;
		file.header.blockingFactor = BLOCKING_FACTOR;
		file.header.formatCode = FORMAT_CODE;
		file.header.priorityCode = PRIORITY_CODE;
		file.header.recordSize = RECORD_SIZE;
		file.header.recordType = RecordType.FILE_HEADER;
		
		file.batches = new ArrayList<AchBatchFormat>();
		file.batches.add(new AchBatchFormat());
		file.batches.get(0).header = new AchBatchHeaderFormat();
		file.batches.get(0).header.companyDescriptiveDate = "000003";
		file.batches.get(0).header.companyDiscretionaryData = null;
		file.batches.get(0).header.companyEntryDescription = "REDEPCHECK";
		file.batches.get(0).header.companyIdentification = "origid";
		file.batches.get(0).header.companyName = "companyname";
		file.batches.get(0).header.effectiveEntryDate = new SimpleDate(8, 7, 30);
		file.batches.get(0).header.originatingDfiIdentification = new RoutingNumber("076401251");
		file.batches.get(0).header.originatorStatusCode = OriginatorStatusCode.AGENT_SUBJECT_TO_RULES;
		file.batches.get(0).header.serviceClassCode = ServiceClassCode.ACH_DEBITS_ONLY;
		file.batches.get(0).header.settlementDate = null;
		file.batches.get(0).header.standardEntryClassCode = StandardEntryClassCode.RCK;
		file.batches.get(0).header.recordType = RecordType.BATCH_HEADER;
		file.batches.get(0).header.batchNumber = 1;
		
		file.batches.get(0).entries = new ArrayList<AchEntryDetailFormat>();
		file.batches.get(0).entries.add(new RCKEntryFormat());
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).amount = 11500;
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).checkDigit = 9;
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).checkSerialNumber = "sadf";
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).dfiAccountNumber = "12345";
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).discretionaryData = "DD";
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).individualName = "Bachman Eric";
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).receivingDfiIdentification = new RoutingNumber("053200019");
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).traceNumber = new TraceNumber(new RoutingNumber("076401251"), 1660936);
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).transactionCode = TransactionCode.CODE_27;
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).recordType = RecordType.ENTRY_DETAIL;
		((RCKEntryFormat)file.batches.get(0).entries.get(0)).addendaRecordIndicator = false;
		
		file.batches.get(0).control = new AchBatchControlFormat();
		file.batches.get(0).control.batchNumber = 1;
		file.batches.get(0).control.entryAddendaCount = 1;
		file.batches.get(0).control.entryHash = 5320001;
		file.batches.get(0).control.messageAuthenticationCode = null;
		file.batches.get(0).control.totalCreditEntryDollarAmount = 0;
		file.batches.get(0).control.totalDebitEntryDollarAmount = 11500;
		file.batches.get(0).control.reserved = null;
		file.batches.get(0).control.serviceClassCode = ServiceClassCode.ACH_DEBITS_ONLY;
		file.batches.get(0).control.companyIdentification = "origid";
		file.batches.get(0).control.originatingDfiIdentification = new RoutingNumber("076401251");
		file.batches.get(0).control.recordType = RecordType.BATCH_CONTROL;
		
		file.control = new AchFileControlFormat();
		file.control.batchCount = 1;
		file.control.blockCount = 1;
		file.control.entryAddendaCount = 1;
		file.control.entryHash = 5320001;
		file.control.recordType = RecordType.FILE_CONTROL;
		file.control.reserved = null;
		file.control.totalCreditEntryDollarAmountInFile = 0;
		file.control.totalDebitEntryDollarAmountInFile = 11500;
		
		StringWriter writer = new StringWriter();
		new AchFileFormatWriter(file, writer).write();
		
		Assert.assertEquals(originalFileData, writer.getBuffer().toString());
	}
}
